name: Build MsQuic NuGet Package

on:
  workflow_dispatch:
    inputs:
      msquic_branch:
        description: 'MsQuic branch to build from'
        required: true
        default: 'main'
      package_version:
        description: 'NuGet package version'
        required: true
        default: '1.0.0'
      prerelease_tag:
        description: 'Prerelease tag (e.g., alpha, beta, leave empty for stable)'
        required: false
        default: ''

env:
  MSQUIC_REPO: https://github.com/microsoft/msquic
  BUILD_CONFIG: Release

jobs:
  build-macos-x64:
    runs-on: macos-15-large
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Generate cache key
        id: cache-key
        run: |
          # Get the latest commit hash from the target branch
          COMMIT_HASH=$(git ls-remote ${{ env.MSQUIC_REPO }} refs/heads/${{ github.event.inputs.msquic_branch }} | cut -f1 | head -c 8)
          echo "commit-hash=$COMMIT_HASH" >> $GITHUB_OUTPUT
          echo "cache-key=msquic-macos-x64-${{ github.event.inputs.msquic_branch }}-${COMMIT_HASH}-${{ env.BUILD_CONFIG }}-quictls" >> $GITHUB_OUTPUT

      - name: Cache build artifacts
        id: cache-artifacts
        uses: actions/cache@v4
        with:
          path: |
            msquic-src/artifacts
          key: ${{ steps.cache-key.outputs.cache-key }}
          restore-keys: |
            msquic-macos-x64-${{ github.event.inputs.msquic_branch }}-

      - name: Clone MsQuic
        if: steps.cache-artifacts.outputs.cache-hit != 'true'
        run: |
          git clone --recursive -b ${{ github.event.inputs.msquic_branch }} ${{ env.MSQUIC_REPO }} msquic-src

      - name: Install dependencies
        if: steps.cache-artifacts.outputs.cache-hit != 'true'
        run: |
          brew install cmake ninja powershell

      - name: Setup build environment
        if: steps.cache-artifacts.outputs.cache-hit != 'true'
        run: |
          echo "MACOSX_DEPLOYMENT_TARGET=13.0" >> $GITHUB_ENV
          echo "SDKROOT=$(xcrun --sdk macosx --show-sdk-path)" >> $GITHUB_ENV
          echo "CFLAGS=-isysroot $(xcrun --sdk macosx --show-sdk-path) -mmacosx-version-min=13.0" >> $GITHUB_ENV
          echo "CXXFLAGS=-isysroot $(xcrun --sdk macosx --show-sdk-path) -mmacosx-version-min=13.0" >> $GITHUB_ENV

      - name: Build MsQuic x64
        if: steps.cache-artifacts.outputs.cache-hit != 'true'
        working-directory: msquic-src
        run: |
          pwsh ./scripts/build.ps1 -Config ${{ env.BUILD_CONFIG }} -Arch x64 -Platform macos -Tls quictls -ExtraArtifactDir _quictls

      - name: List all artifacts
        run: |
          echo "=== Full artifacts directory tree ==="
          find msquic-src/artifacts -type f | head -50 || echo "No artifacts found"
          echo ""
          echo "=== Directory structure ==="
          find msquic-src/artifacts -type d | head -20 || echo "No directories found"
      
      - name: Upload x64 artifacts
        uses: actions/upload-artifact@v4
        with:
          name: osx-x64
          path: msquic-src/artifacts

  build-macos-arm64:
    runs-on: macos-15
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Generate cache key
        id: cache-key
        run: |
          # Get the latest commit hash from the target branch
          COMMIT_HASH=$(git ls-remote ${{ env.MSQUIC_REPO }} refs/heads/${{ github.event.inputs.msquic_branch }} | cut -f1 | head -c 8)
          echo "commit-hash=$COMMIT_HASH" >> $GITHUB_OUTPUT
          echo "cache-key=msquic-macos-arm64-${{ github.event.inputs.msquic_branch }}-${COMMIT_HASH}-${{ env.BUILD_CONFIG }}-quictls" >> $GITHUB_OUTPUT

      - name: Cache build artifacts
        id: cache-artifacts
        uses: actions/cache@v4
        with:
          path: |
            msquic-src/artifacts
          key: ${{ steps.cache-key.outputs.cache-key }}
          restore-keys: |
            msquic-macos-arm64-${{ github.event.inputs.msquic_branch }}-

      - name: Clone MsQuic
        if: steps.cache-artifacts.outputs.cache-hit != 'true'
        run: |
          git clone --recursive -b ${{ github.event.inputs.msquic_branch }} ${{ env.MSQUIC_REPO }} msquic-src

      - name: Install dependencies
        if: steps.cache-artifacts.outputs.cache-hit != 'true'
        run: |
          brew install cmake ninja powershell

      - name: Setup build environment
        if: steps.cache-artifacts.outputs.cache-hit != 'true'
        run: |
          echo "MACOSX_DEPLOYMENT_TARGET=13.0" >> $GITHUB_ENV
          echo "SDKROOT=$(xcrun --sdk macosx --show-sdk-path)" >> $GITHUB_ENV
          echo "CFLAGS=-isysroot $(xcrun --sdk macosx --show-sdk-path) -mmacosx-version-min=13.0" >> $GITHUB_ENV
          echo "CXXFLAGS=-isysroot $(xcrun --sdk macosx --show-sdk-path) -mmacosx-version-min=13.0" >> $GITHUB_ENV

      - name: Build MsQuic ARM64
        if: steps.cache-artifacts.outputs.cache-hit != 'true'
        working-directory: msquic-src
        run: |
          pwsh ./scripts/build.ps1 -Config ${{ env.BUILD_CONFIG }} -Arch arm64 -Platform macos -Tls quictls -ExtraArtifactDir _quictls

      - name: List all artifacts  
        run: |
          echo "=== Full artifacts directory tree ==="
          find msquic-src/artifacts -type f | head -50 || echo "No artifacts found"
          echo ""
          echo "=== Directory structure ==="
          find msquic-src/artifacts -type d | head -20 || echo "No directories found"
      
      - name: Upload ARM64 artifacts
        uses: actions/upload-artifact@v4
        with:
          name: osx-arm64
          path: msquic-src/artifacts

  create-nuget:
    needs: [build-macos-x64, build-macos-arm64]
    if: ${{ always() && (needs.build-macos-x64.result == 'success' || needs.build-macos-arm64.result == 'success') }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
        continue-on-error: true
      
      - name: Check downloaded artifacts
        run: |
          echo "=== Full downloaded artifacts tree ==="
          find artifacts -type f -name "*.dylib" -o -name "*.a" | head -50
          echo ""
          echo "=== All directories ==="
          find artifacts -type d | head -30

      - name: Organize artifacts
        run: |
          mkdir -p package/runtimes
          
          # Find and copy macOS binaries from the complete artifacts structure
          echo "Looking for library files in downloaded artifacts..."
          
          # x64 artifacts
          echo "Processing x64 artifacts..."
          mkdir -p package/runtimes/osx-x64/native
          find artifacts/osx-x64 -name "*.dylib" -exec cp {} package/runtimes/osx-x64/native/ \; 2>/dev/null && echo "Found x64 .dylib files" || echo "No x64 .dylib files"
          find artifacts/osx-x64 -name "*.a" -exec cp {} package/runtimes/osx-x64/native/ \; 2>/dev/null && echo "Found x64 .a files" || echo "No x64 .a files"
          
          # arm64 artifacts  
          echo "Processing arm64 artifacts..."
          mkdir -p package/runtimes/osx-arm64/native
          find artifacts/osx-arm64 -name "*.dylib" -exec cp {} package/runtimes/osx-arm64/native/ \; 2>/dev/null && echo "Found arm64 .dylib files" || echo "No arm64 .dylib files"
          find artifacts/osx-arm64 -name "*.a" -exec cp {} package/runtimes/osx-arm64/native/ \; 2>/dev/null && echo "Found arm64 .a files" || echo "No arm64 .a files"
          
          echo ""
          echo "Final package structure:"
          find package -type f | head -20

      - name: Install Mono (for NuGet.exe)
        run: |
          sudo apt-get update
          sudo apt-get install -y mono-complete

      - name: Setup NuGet
        uses: nuget/setup-nuget@v2
        with:
          nuget-version: 'latest'

      - name: Create NuGet package
        run: |
          # Generate version string
          VERSION="${{ github.event.inputs.package_version }}"
          if [ -n "${{ github.event.inputs.prerelease_tag }}" ]; then
            VERSION="$VERSION-${{ github.event.inputs.prerelease_tag }}"
          fi
          
          # Find the actual nuget.exe file
          NUGET_EXE=$(find /opt/hostedtoolcache/nuget.exe -name "nuget.exe" -type f | head -1)
          echo "Found NuGet.exe at: $NUGET_EXE"
          
          # Pack the NuGet package using nuget.exe with mono
          mono "$NUGET_EXE" pack MsQuic.Native.nuspec -Version $VERSION -OutputDirectory nupkg -NoDefaultExcludes

      - name: Upload NuGet package
        uses: actions/upload-artifact@v4
        with:
          name: nuget-package
          path: nupkg/*.nupkg

      - name: Create Release
        if: github.event_name == 'workflow_dispatch'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ github.event.inputs.package_version }}
          name: MsQuic Native v${{ github.event.inputs.package_version }}
          body: |
            MsQuic native libraries packaged for NuGet
            
            **MsQuic Branch:** ${{ github.event.inputs.msquic_branch }}
            **Package Version:** ${{ github.event.inputs.package_version }}${{ github.event.inputs.prerelease_tag && format('-{0}', github.event.inputs.prerelease_tag) || '' }}
            
            **Supported Platforms:**
            - Windows (x64, x86, ARM64)
            - Linux (x64, ARM64)
            - macOS (x64, ARM64)
          files: nupkg/*.nupkg
          draft: false
          prerelease: ${{ github.event.inputs.prerelease_tag != '' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}