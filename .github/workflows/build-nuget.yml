name: Build MsQuic NuGet Package

on:
  workflow_dispatch:
    inputs:
      msquic_branch:
        description: 'MsQuic branch to build from'
        required: true
        default: 'main'
      package_version:
        description: 'NuGet package version'
        required: true
        default: '1.0.0'
      prerelease_tag:
        description: 'Prerelease tag (e.g., alpha, beta, leave empty for stable)'
        required: false
        default: ''
      use_system_openssl:
        description: 'Use system crypto instead of bundling it'
        type: boolean
        required: false
        default: false

env:
  MSQUIC_REPO: https://github.com/microsoft/msquic
  BUILD_CONFIG: Release

jobs:
  build-macos:
    strategy:
      matrix:
        include:
          - arch: x64
            runner: macos-13
          - arch: arm64
            runner: macos-15
      fail-fast: false  # Allow other matrix jobs to continue if one fails
    runs-on: ${{ matrix.runner }}
    continue-on-error: true  # Don't mark this job as failed if any matrix run fails
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Generate cache key
        id: cache-key
        run: |
          # Get the latest commit hash from the target branch
          COMMIT_HASH=$(git ls-remote ${{ env.MSQUIC_REPO }} refs/heads/${{ github.event.inputs.msquic_branch }} | cut -f1 | head -c 8)
          echo "commit-hash=$COMMIT_HASH" >> $GITHUB_OUTPUT
          echo "cache-key=msquic-macos-${{ matrix.arch }}-${{ github.event.inputs.msquic_branch }}-${COMMIT_HASH}-${{ env.BUILD_CONFIG }}-quictls" >> $GITHUB_OUTPUT

      - name: Cache build artifacts
        id: cache-artifacts
        uses: actions/cache@v4
        with:
          path: |
            msquic-src/artifacts
          key: ${{ steps.cache-key.outputs.cache-key }}
          restore-keys: |
            msquic-macos-${{ matrix.arch }}-${{ github.event.inputs.msquic_branch }}-

      - name: Clone MsQuic
        if: steps.cache-artifacts.outputs.cache-hit != 'true'
        run: |
          rm -rf msquic-src
          git clone --recursive -b ${{ github.event.inputs.msquic_branch }} ${{ env.MSQUIC_REPO }} msquic-src

      - name: Install dependencies
        if: steps.cache-artifacts.outputs.cache-hit != 'true'
        run: |
          # Check and install cmake if not available
          if ! command -v cmake &> /dev/null; then
            echo "Installing cmake..."
            brew install cmake
          else
            echo "cmake already installed: $(cmake --version)"
          fi
          
          # Check and install ninja if not available
          if ! command -v ninja &> /dev/null; then
            echo "Installing ninja..."
            brew install ninja
          else
            echo "ninja already installed: $(ninja --version)"
          fi
          
          # Check and install powershell if not available
          if ! command -v pwsh &> /dev/null; then
            echo "Installing powershell..."
            brew install powershell
          else
            echo "powershell already installed: $(pwsh --version)"
          fi

      - name: Setup build environment
        if: steps.cache-artifacts.outputs.cache-hit != 'true'
        run: |
          echo "MACOSX_DEPLOYMENT_TARGET=13.0" >> $GITHUB_ENV
          echo "SDKROOT=$(xcrun --sdk macosx --show-sdk-path)" >> $GITHUB_ENV
          echo "CFLAGS=-isysroot $(xcrun --sdk macosx --show-sdk-path) -mmacosx-version-min=13.0" >> $GITHUB_ENV
          echo "CXXFLAGS=-isysroot $(xcrun --sdk macosx --show-sdk-path) -mmacosx-version-min=13.0" >> $GITHUB_ENV

      - name: Build MsQuic ${{ matrix.arch }}
        if: steps.cache-artifacts.outputs.cache-hit != 'true'
        working-directory: msquic-src
        run: |
          if [ "${{ github.event.inputs.use_system_openssl }}" == "true" ]; then
            pwsh ./scripts/build.ps1 -Config ${{ env.BUILD_CONFIG }} -Arch ${{ matrix.arch }} -Platform macos -Tls quictls -ExtraArtifactDir _quictls -UseSystemOpenSSLCrypto
          else
            pwsh ./scripts/build.ps1 -Config ${{ env.BUILD_CONFIG }} -Arch ${{ matrix.arch }} -Platform macos -Tls quictls -ExtraArtifactDir _quictls
          fi

      - name: List all artifacts
        run: |
          echo "=== Full artifacts directory tree ==="
          find msquic-src/artifacts -type f | head -50 || echo "No artifacts found"
          echo ""
          echo "=== Directory structure ==="
          find msquic-src/artifacts -type d | head -20 || echo "No directories found"
      
      - name: Upload ${{ matrix.arch }} artifacts
        uses: actions/upload-artifact@v4
        with:
          name: osx-${{ matrix.arch }}
          path: msquic-src/artifacts

  create-nuget:
    needs: [build-macos]
    if: ${{ always() && !cancelled() }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
        continue-on-error: true
      
      - name: Check downloaded artifacts
        run: |
          echo "=== Full downloaded artifacts tree ==="
          find artifacts -type f -name "*.dylib" -o -name "*.a" | head -50
          echo ""
          echo "=== All directories ==="
          find artifacts -type d | head -30

      - name: Organize artifacts
        run: |
          mkdir -p package/runtimes
          
          # Find and copy macOS binaries from the complete artifacts structure
          echo "Looking for library files in downloaded artifacts..."
          
          # x64 artifacts
          echo "Processing x64 artifacts..."
          mkdir -p package/runtimes/osx-x64/native
          
          # Find the actual bin directory for x64 artifacts
          X64_BIN_DIR=$(find artifacts/osx-x64 -path "*/bin/macos/x64_Release*" -type d | head -1)
          if [ -n "$X64_BIN_DIR" ]; then
            echo "Found x64 bin directory: $X64_BIN_DIR"
            # Copy with symlinks preserved (-P flag)
            cp -P "$X64_BIN_DIR"/libmsquic*.dylib package/runtimes/osx-x64/native/ 2>/dev/null && echo "Copied x64 dylib files" || echo "No x64 dylib files"
            cp "$X64_BIN_DIR"/libmsquic*.a package/runtimes/osx-x64/native/ 2>/dev/null && echo "Copied x64 static libraries" || echo "No x64 static libraries"
          else
            echo "No x64 bin directory found"
          fi
          
          # arm64 artifacts  
          echo "Processing arm64 artifacts..."
          mkdir -p package/runtimes/osx-arm64/native
          
          # Find the actual bin directory for arm64 artifacts
          ARM64_BIN_DIR=$(find artifacts/osx-arm64 -path "*/bin/macos/arm64_Release*" -type d | head -1)
          if [ -n "$ARM64_BIN_DIR" ]; then
            echo "Found arm64 bin directory: $ARM64_BIN_DIR"
            # Copy with symlinks preserved (-P flag)
            cp -P "$ARM64_BIN_DIR"/libmsquic*.dylib package/runtimes/osx-arm64/native/ 2>/dev/null && echo "Copied arm64 dylib files" || echo "No arm64 dylib files"
            cp "$ARM64_BIN_DIR"/libmsquic*.a package/runtimes/osx-arm64/native/ 2>/dev/null && echo "Copied arm64 static libraries" || echo "No arm64 static libraries"
          else
            echo "No arm64 bin directory found"
          fi
          
          # Recreate symlinks if they don't exist (artifact upload/download doesn't preserve symlinks)
          echo "Recreating symlinks if needed..."
          
          # For x64
          X64_VERSIONED_LIB=$(find package/runtimes/osx-x64/native/ -name "libmsquic.*.*.*.dylib" | head -1)
          if [ -n "$X64_VERSIONED_LIB" ] && [ ! -L "package/runtimes/osx-x64/native/libmsquic.2.dylib" ]; then
            cd package/runtimes/osx-x64/native/
            VERSIONED_NAME=$(basename "$X64_VERSIONED_LIB")
            ln -sf "$VERSIONED_NAME" libmsquic.2.dylib
            ln -sf libmsquic.2.dylib libmsquic.dylib
            cd - > /dev/null
            echo "Created x64 symlinks for $VERSIONED_NAME"
          fi
          
          # For arm64
          ARM64_VERSIONED_LIB=$(find package/runtimes/osx-arm64/native/ -name "libmsquic.*.*.*.dylib" | head -1)
          if [ -n "$ARM64_VERSIONED_LIB" ] && [ ! -L "package/runtimes/osx-arm64/native/libmsquic.2.dylib" ]; then
            cd package/runtimes/osx-arm64/native/
            VERSIONED_NAME=$(basename "$ARM64_VERSIONED_LIB")
            ln -sf "$VERSIONED_NAME" libmsquic.2.dylib
            ln -sf libmsquic.2.dylib libmsquic.dylib
            cd - > /dev/null
            echo "Created arm64 symlinks for $VERSIONED_NAME"
          fi
          
          echo ""
          echo "Final package structure:"
          find package -type f -o -type l | head -20
          echo ""
          echo "Verifying symlinks:"
          find package -type l -exec ls -la {} \;

      - name: Install Mono (for NuGet.exe)
        run: |
          sudo apt-get update
          sudo apt-get install -y mono-complete

      - name: Setup NuGet
        uses: nuget/setup-nuget@v2
        with:
          nuget-version: 'latest'

      - name: Create NuGet package
        run: |
          # Generate version string
          VERSION="${{ github.event.inputs.package_version }}"
          if [ -n "${{ github.event.inputs.prerelease_tag }}" ]; then
            VERSION="$VERSION-${{ github.event.inputs.prerelease_tag }}"
          fi
          
          # Find the actual nuget.exe file
          NUGET_EXE=$(find /opt/hostedtoolcache/nuget.exe -name "nuget.exe" -type f | head -1)
          echo "Found NuGet.exe at: $NUGET_EXE"
          
          # Pack the NuGet package using nuget.exe with mono
          mono "$NUGET_EXE" pack MsQuic.Native.nuspec -Version $VERSION -OutputDirectory nupkg -NoDefaultExcludes
          
          echo ""
          echo "=== Generated NuGet package ==="
          ls -la nupkg/
          
          echo ""
          echo "=== Package contents ==="
          unzip -l nupkg/*.nupkg | head -30

      - name: Upload NuGet package
        uses: actions/upload-artifact@v4
        with:
          name: nuget-package
          path: nupkg/*.nupkg

  verify-package:
    needs: [create-nuget]
    if: needs.create-nuget.result == 'success'
    strategy:
      matrix:
        os: [macos-15, macos-13]  # Test on both ARM64 and x64 runners
        include:
          - os: macos-15
            arch: arm64
          - os: macos-13
            arch: x64
            continue-on-error: true  # x64 verification is optional
      fail-fast: false  # Allow arm64 to continue if x64 fails
    runs-on: ${{ matrix.os }}
    continue-on-error: ${{ matrix.arch == 'x64' }}  # Only allow x64 to fail
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '10.0.x'  # Use .NET 10 to match test project

      - name: Download NuGet package
        uses: actions/download-artifact@v4
        with:
          name: nuget-package
          path: ./nupkg

      - name: List downloaded package
        run: |
          echo "Downloaded NuGet package:"
          ls -la ./nupkg/
          
          echo ""
          echo "Package contents:"
          unzip -l ./nupkg/*.nupkg | head -20

      - name: Create test project
        run: |
          cd test-project/MsQuicTest
          
          # Extract version from the package filename
          PACKAGE_FILE=$(ls ../../nupkg/*.nupkg | head -1)
          PACKAGE_NAME=$(basename "$PACKAGE_FILE" .nupkg)
          VERSION=$(echo "$PACKAGE_NAME" | sed 's/MsQuic.Native.//g')
          
          echo "Testing with package version: $VERSION"
          
          # Add the local NuGet package as source and install it
          dotnet add package MsQuic.Native --version $VERSION --source "../../nupkg/"
          
          echo ""
          echo "Updated project file:"
          cat MsQuicTest.csproj

      - name: Build test project
        run: |
          cd test-project/MsQuicTest
          dotnet build -v minimal
          
          echo ""
          echo "Checking runtime directory:"
          find bin/Debug -name "*.dylib" -o -name "*.a" || echo "No native libraries found"

      - name: Run verification test
        id: test-result
        run: |
          cd test-project/MsQuicTest
          
          echo "Running MsQuic verification test..."
          
          # Capture both output and exit code
          set +e  # Don't exit on error
          OUTPUT=$(dotnet run 2>&1)
          EXIT_CODE=$?
          set -e  # Re-enable exit on error
          
          echo "$OUTPUT"
          echo ""
          echo "Exit code: $EXIT_CODE"
          
          # Check for success indicators in output
          if echo "$OUTPUT" | grep -q "TEST_RESULT: SUCCESS"; then
            echo "✅ Verification test passed!"
            echo "test-passed=true" >> $GITHUB_OUTPUT
          else
            echo "❌ Verification test failed!"
            echo "test-passed=false" >> $GITHUB_OUTPUT
            exit 1
          fi

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.arch }}
          path: test-project/MsQuicTest/bin/Debug/

  create-release:
    needs: [create-nuget, verify-package]
    if: ${{ always() && needs.create-nuget.result == 'success' && needs.verify-package.result == 'success' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download NuGet package
        uses: actions/download-artifact@v4
        with:
          name: nuget-package
          path: ./nupkg

      - name: Create Release
        if: github.event_name == 'workflow_dispatch'
        uses: actions/create-release@v1
        id: create_release
        with:
          tag_name: v${{ github.event.inputs.package_version }}
          release_name: MsQuic Native v${{ github.event.inputs.package_version }}
          body: |
            MsQuic native libraries packaged for NuGet
            
            **MsQuic Branch:** ${{ github.event.inputs.msquic_branch }}
            **Package Version:** ${{ github.event.inputs.package_version }}${{ github.event.inputs.prerelease_tag && format('-{0}', github.event.inputs.prerelease_tag) || '' }}
            
            **Supported Platforms:**
            - Windows (x64, x86, ARM64)
            - Linux (x64, ARM64)
            - macOS (x64, ARM64)
          draft: false
          prerelease: ${{ github.event.inputs.prerelease_tag != '' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Get package file path
        id: package_path
        run: |
          PACKAGE_FILE=$(ls ./nupkg/*.nupkg | head -1)
          echo "package_file=$PACKAGE_FILE" >> $GITHUB_OUTPUT
          echo "package_name=$(basename "$PACKAGE_FILE")" >> $GITHUB_OUTPUT
      
      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ steps.package_path.outputs.package_file }}
          asset_name: ${{ steps.package_path.outputs.package_name }}
          asset_content_type: application/zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
